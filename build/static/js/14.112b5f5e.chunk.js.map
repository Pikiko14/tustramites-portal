{"version":3,"sources":["components/layout/components/NewProcedure.jsx","components/table/DataTable.js","components/table/ActionTable.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EyeOutlined.js","pages/notification/components/NotificationDialog.js","pages/notification/notification.page.js"],"names":["NewProcedure","_ref","title","_jsxs","className","children","_jsx","MoreIcon","Notifications","DataTable","columns","data","pagination","Table","dataSource","ActionTable","handleSee","handleEdit","handleDelete","Space","size","onClick","EyeOutlined","EditOutlined","DeleteOutlined","props","ref","React","AntdIcon","_objectSpread","icon","EditOutlinedSvg","RefIcon","EyeOutlinedSvg","Option","Select","NotificationDialog","notification","setData","callback","form","Form","useForm","user","useContext","AuthContext","value","setValue","useState","undefined","valueNotarial","setValueNotarial","users","setUsers","userSelected","setUserSelected","procedureNotarials","setProcedureNotarials","procedurNotarialSelected","setProcedureNotarialSelected","handleOk","link","role","process","state","notarialAct","_id","httpClient","put","getFieldValue","message","created_at","view","_from","id","_to","text","then","res","post","Date","handleCancel","loadProcedureNotarials","async","response","get","status","useEffect","responseUsers","filter","item","getUsers","resetFields","setFieldsValue","userSearch","find","idRegex","pRegex","pMatch","match","procedurenotarialSearch","Modal","open","onOk","onCancel","forceRender","maskClosable","closeIcon","CloseOutlined","footer","Button","type","layout","Item","label","name","hasFeedback","rules","required","min","Input","showSearch","defaultValue","placeholder","defaultActiveFirstOption","showArrow","onChange","filterOption","input","option","toLowerCase","indexOf","map","first_name","last_name","length","procedure","moment","date","locale","format","max","Notification","loader","setLoader","listDatas","setListDatas","dataDialog","setDataDialog","dataIndex","key","render","record","alertShow","Alert","show","btnOk","fnOk","deleteData","btnCancel","buttonX","delete","getDatas","notifications","notificationsTemp","procedures","push","sort","a","b","setTimeout","_Fragment","callbackData","Layout","classNameMain","position"],"mappings":"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","file":"static/js/14.112b5f5e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { MoreIcon } from '../../icons/Icons'\r\nimport Notifications from './Notifications'\r\n\r\nconst NewProcedure = ({ title = 'Nuevo Trámite' }) => {\r\n  return (\r\n    <div className=\"content-add-tramite\">\r\n      <div className=\"button-nuevo-tramite\">\r\n        <div className=\"centrarVerHor\">\r\n          <MoreIcon />\r\n          <span>{title}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"input-tramite\">\r\n        <div className=\"notificacion-movil\">\r\n          <Notifications />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewProcedure\r\n","import React from 'react'\r\nimport { Table } from 'antd'\r\n\r\nconst DataTable = ({ columns, data, pagination }) => {\r\n  return <Table columns={columns} dataSource={data} pagination={pagination} />\r\n}\r\n\r\nexport default DataTable\r\n","import React from 'react'\r\nimport { Space } from 'antd'\r\n\r\n// ICON\r\nimport { EditOutlined, DeleteOutlined, EyeOutlined } from '@ant-design/icons'\r\n\r\nconst ActionTable = ({ handleSee, handleEdit, handleDelete }) => {\r\n  return (\r\n    <Space size=\"middle\">\r\n      {handleSee ? (\r\n        <span className=\"action-edit\" onClick={handleSee}>\r\n          <EyeOutlined />\r\n          Ver\r\n        </span>\r\n      ) : null}\r\n      {handleEdit ? (\r\n        <span className=\"action-edit\" onClick={handleEdit}>\r\n          <EditOutlined />\r\n          Editar\r\n        </span>\r\n      ) : null}\r\n      {handleDelete ? (\r\n        <span className=\"action-edit\" onClick={handleDelete}>\r\n          <DeleteOutlined />\r\n          Eliminar\r\n        </span>\r\n      ) : null}\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default ActionTable\r\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(EditOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'EditOutlined';\n}\nexport default RefIcon;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeOutlinedSvg from \"@ant-design/icons-svg/es/asn/EyeOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EyeOutlined = function EyeOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EyeOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(EyeOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'EyeOutlined';\n}\nexport default RefIcon;","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Modal } from 'antd'\r\nimport AuthContext from '../../../context/AuthContext'\r\nimport httpClient from '../../../helpers/network/HttpClient'\r\nimport moment from 'moment'\r\nimport 'moment/locale/es'\r\n\r\nimport { Form, Input, Button, Select } from 'antd'\r\nimport './scss/NotificationDialog.scss'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\nconst { Option } = Select\r\n\r\nconst NotificationDialog = ({ notification, data, setData, callback }) => {\r\n  const [form] = Form.useForm()\r\n  const { user } = useContext(AuthContext)\r\n  const [value, setValue] = useState(undefined)\r\n  const [valueNotarial, setValueNotarial] = useState(undefined)\r\n  const [users, setUsers] = useState([])\r\n  const [userSelected, setUserSelected] = useState({})\r\n  const [procedureNotarials, setProcedureNotarials] = useState([])\r\n  const [procedurNotarialSelected, setProcedureNotarialSelected] = useState({})\r\n\r\n  const handleOk = () => {\r\n    let link = userSelected.role === 'ASESOR LEGAL' ? process.env.REACT_APP_URL_CLIENT + '/procedure' : ''\r\n    if (procedurNotarialSelected) {\r\n      link = process.env.REACT_APP_URL_CLIENT\r\n      if (procedurNotarialSelected.state === '2')\r\n        link = link + '/notarialactsteptwo?id=' + procedurNotarialSelected.notarialAct._id + '&p=' + procedurNotarialSelected._id\r\n      else if (procedurNotarialSelected.state === '3')\r\n        link = link + '/notarialactstepthree?id=' + procedurNotarialSelected.notarialAct._id + '&p=' + procedurNotarialSelected._id\r\n      else if (procedurNotarialSelected.state === '4')\r\n        link = link + '/notarialactstepfour?id=' + procedurNotarialSelected.notarialAct._id + '&p=' + procedurNotarialSelected._id\r\n      else if (procedurNotarialSelected.state === '6' || procedurNotarialSelected.state === '7') link = link + '/ordersummary?p=' + procedurNotarialSelected._id\r\n      else if (procedurNotarialSelected.state === '8' || procedurNotarialSelected.state === '9') link = link + '/documentresult?p=' + procedurNotarialSelected._id\r\n      else if (procedurNotarialSelected.state === '11' || procedurNotarialSelected.state === '13') link = link + '/date?p=' + procedurNotarialSelected._id\r\n      else link = ''\r\n    }\r\n\r\n    if (notification) {\r\n      httpClient.put('/api/notification-new/update/' + notification._id, {\r\n        title: form.getFieldValue('title'),\r\n        message: form.getFieldValue('message'),\r\n        created_at: notification.created_at,\r\n        view: notification.view,\r\n        _from: user.id,\r\n        _to: form.getFieldValue('_to'),\r\n        text: form.getFieldValue('text') || '',\r\n        link: form.getFieldValue('text') ? link : ''\r\n      })\r\n        .then((res) => {\r\n          setData(null)\r\n          callback()\r\n        })\r\n\r\n    } else {\r\n\r\n      httpClient.post('/api/notification-new', {\r\n        title: form.getFieldValue('title'),\r\n        message: form.getFieldValue('message'),\r\n        created_at: new Date(),\r\n        view: false,\r\n        _from: user.id,\r\n        _to: form.getFieldValue('_to'),\r\n        text: form.getFieldValue('text') || '',\r\n        link: form.getFieldValue('text') ? link : ''\r\n      })\r\n        .then((res) => {\r\n          setData(null)\r\n          callback()\r\n        })\r\n\r\n    }\r\n\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setData(null)\r\n  }\r\n\r\n  const handleChange = (value) => {\r\n    setValue(value)\r\n    let userSearch = users.find(item => item._id === value)\r\n    if (userSearch) {\r\n      setUserSelected(userSearch)\r\n      setValueNotarial(undefined)\r\n      setProcedureNotarialSelected({})\r\n      setProcedureNotarials([])\r\n      loadProcedureNotarials(value)\r\n    }\r\n  }\r\n\r\n  const handleChangeNotarial = (value) => {\r\n    setValueNotarial(value)\r\n    let procedurenotarialSearch = procedureNotarials.find(item => item._id === value)\r\n    if (procedurenotarialSearch) {\r\n      setProcedureNotarialSelected(procedurenotarialSearch)\r\n    }\r\n  }\r\n\r\n  const loadProcedureNotarials = async (value) => {\r\n    const response = await httpClient.get('/api/procedurenotarial/' + value)\r\n    if (response.status == 200) {\r\n      setProcedureNotarials(response.data)\r\n    }\r\n  }\r\n\r\n  const getUsers = async () => {\r\n    const responseUsers = await httpClient.get('/api/user')\r\n    if (responseUsers.status == 200) {\r\n      setUsers(responseUsers.data.filter(item => item.role === 'CLIENTE'))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUsers()\r\n    form.resetFields()\r\n    if (notification) {\r\n      let data = {\r\n        title: notification.title,\r\n        message: notification.message,\r\n        _to: notification._to,\r\n        text: notification.text,\r\n        link: notification.link\r\n      }\r\n      form.setFieldsValue(data)\r\n      setValue(notification._to)\r\n      let userSearch = users.find(item => item._id === notification._to)\r\n      if (userSearch) {\r\n        setUserSelected(userSearch)\r\n        loadProcedureNotarials(notification._to)\r\n      }\r\n\r\n      if (notification.link && notification.link !== '') {\r\n        const idRegex = /id=([^&]+)/\r\n        const pRegex = /p=([^&]+)/\r\n        const idMatch = notification.link.match(idRegex)\r\n        const pMatch = notification.link.match(pRegex)\r\n\r\n        let procedurenotarialSearch = procedureNotarials.find(item => item._id === pMatch)\r\n        if (procedurenotarialSearch) {\r\n          setProcedureNotarialSelected(procedurenotarialSearch)\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  }, [notification, data])\r\n\r\n\r\n  return (\r\n    <Modal\r\n      open={data}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n      forceRender\r\n      maskClosable={false}\r\n      closeIcon={\r\n        <span className=\"containerButtonX\" onClick={handleCancel}>\r\n          <CloseOutlined />\r\n        </span>}\r\n      footer={[\r\n        <Button className='btnContinuar' key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n          Aceptar\r\n        </Button>\r\n      ]}\r\n    >\r\n      <h3>Información de la notificación</h3>\r\n      <Form layout=\"vertical\" form={form}>\r\n        <div className=\"form-control\">\r\n\r\n          <Form.Item\r\n            label=\"Titulo\"\r\n            name=\"title\"\r\n            id=\"title\"\r\n            hasFeedback\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Por favor ingrese el titulo!'\r\n              },\r\n              {\r\n                min: 3,\r\n                message: 'El titulo debe tener al menos 3 caracteres!'\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Mensaje\"\r\n            name=\"message\"\r\n            id=\"message\"\r\n            hasFeedback\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Por favor ingrese el mensaje!'\r\n              },\r\n              {\r\n                min: 3,\r\n                message: 'El mensaje debe tener al menos 3 caracteres!'\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n\r\n          <Form.Item\r\n            name=\"_to\"\r\n            id=\"_to\"\r\n            label=\"Asignado a:\"\r\n            rules={[\r\n              {\r\n                required: true\r\n              }\r\n            ]}\r\n          >\r\n            <Select\r\n              showSearch\r\n              value={value}\r\n              defaultValue={value}\r\n              placeholder=\"Selecciones un usuario\"\r\n              //                        style={{ width: 200 }}\r\n              defaultActiveFirstOption={false}\r\n              showArrow={false}\r\n              //onSearch={handleSearch}\r\n              onChange={handleChange}\r\n              filterOption={(input, option) => {\r\n                return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n              }\r\n              }\r\n            >\r\n              {users.map(user => (\r\n                <Option key={user._id} value={user._id}>\r\n                  {user.first_name + ' ' + user.last_name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          {procedureNotarials.length > 0 &&\r\n            <Form.Item\r\n              name=\"procedure\"\r\n              id=\"procedure\"\r\n              label=\"Acto notarial\"\r\n            >\r\n\r\n              <Select\r\n                showSearch\r\n                value={valueNotarial}\r\n                defaultValue={valueNotarial}\r\n                placeholder=\"Selecciones un acto notarial\"\r\n                defaultActiveFirstOption={false}\r\n                showArrow={false}\r\n                onChange={handleChangeNotarial}\r\n                filterOption={(input, option) => {\r\n                  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n                }\r\n              >\r\n                {procedureNotarials.map(procedure => (\r\n                  <Option key={procedure._id} value={procedure._id}>\r\n                    {moment(procedure.date).locale('es').format('LL') + ' - ' + procedure.notarialAct.name}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Form.Item>\r\n          }\r\n\r\n          <Form.Item\r\n            label=\"Texto del botón\"\r\n            name=\"text\"\r\n            id=\"text\"\r\n            hasFeedback\r\n            rules={[\r\n              {\r\n                min: 3,\r\n                message: 'El texto debe tener al menos 3 caracteres!'\r\n              },\r\n              {\r\n                max: 25,\r\n                message: 'El texto debe tener máximo 25 caracteres!'\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </div>\r\n      </Form>\r\n\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default NotificationDialog\r\n","import React, { useState, useEffect } from 'react'\r\nimport httpClient from '../../helpers/network/HttpClient'\r\nimport Layout from '../../components/layout/Layout'\r\nimport DataTable from '../../components/table/DataTable'\r\nimport ActionTable from '../../components/table/ActionTable'\r\nimport NotificationDialog from './components/NotificationDialog'\r\nimport '../procedurenotarial/scss/procedurenotarial.page.scss'\r\nimport NewProcedure from '../../components/layout/components/NewProcedure'\r\nimport Alert from '../../helpers/alert/Alert'\r\nimport { Button } from 'antd'\r\nimport moment from 'moment'\r\nimport 'moment/locale/es'\r\n\r\nimport './scss/notification.page.scss'\r\n\r\nconst Notification = () => {\r\n  const [loader, setLoader] = useState(false)\r\n  const [listDatas, setListDatas] = useState([])\r\n  const [dataDialog, setDataDialog] = useState()\r\n  const [data, setData] = useState(undefined)\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Titulo',\r\n      dataIndex: 'title',\r\n      key: 'title',\r\n      render: text => <span>{text}</span>\r\n    },\r\n    {\r\n      title: 'Fecha',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      render: text => <span>{text}</span>\r\n    },\r\n    {\r\n      title: 'Asignado a',\r\n      dataIndex: '_to_complete',\r\n      key: '_to_complete',\r\n      render: record => <span>{record && record.first_name && record.last_name\r\n        ? record.first_name + ' ' + record.last_name\r\n        : 'Sin asignar'}</span>\r\n    },\r\n    {\r\n      title: 'Acto notarial',\r\n      dataIndex: 'procedure_notarial',\r\n      key: 'procedure_notarial',\r\n      render: text => <span>{text}</span>\r\n    },\r\n    {\r\n      title: 'Estado',\r\n      dataIndex: 'view',\r\n      key: 'view',\r\n      render: record => <span>{record ? 'Leído' : 'No leído'}</span>\r\n    },\r\n    {\r\n      title: 'Acción',\r\n      dataIndex: 'action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <ActionTable\r\n          //handleEdit={() => handleEditData(record)}\r\n          handleDelete={() => alertShow(record)}\r\n        />\r\n      )\r\n    }\r\n  ]\r\n\r\n  const handleNewData = () => {\r\n    setData(null)\r\n    setDataDialog({})\r\n  }\r\n\r\n  const handleEditData = (notification) => {\r\n    if (!notification.view) {\r\n      setData(notification)\r\n      setDataDialog({ notification })\r\n    } else {\r\n      Alert.show({\r\n        type: 'error',\r\n        title: '',\r\n        message: 'No puedes editar esta notificación, ya el usuario la marco como leída.',\r\n        buttonX: true\r\n      })\r\n    }\r\n  }\r\n\r\n  const alertShow = (input) => {\r\n    Alert.show({\r\n      type: 'error',\r\n      title: '',\r\n      message: '¿Seguro desea eliminar esta notificación?',\r\n      btnOk: 'Aceptar',\r\n      fnOk: () => { deleteData(input) },\r\n      btnCancel: 'Cancelar',\r\n      buttonX: true\r\n    })\r\n  }\r\n\r\n  const deleteData = async (notification) => {\r\n\r\n    const response = await httpClient.delete('/api/notification-new/' + notification._id)\r\n    if (response.status == 200) {\r\n      getDatas()\r\n    }\r\n  }\r\n\r\n  const callbackData = () => {\r\n    getDatas()\r\n    setDataDialog(null)\r\n  }\r\n\r\n  const getDatas = async () => {\r\n    let notifications = []\r\n    let users = []\r\n    const response = await httpClient.get('/api/notification-new/all?type=0')\r\n    if (response.status == 200) {\r\n      notifications = [...response.data]\r\n    }\r\n    const responseUsers = await httpClient.get('/api/user')\r\n    if (responseUsers.status == 200) {\r\n      users = [...responseUsers.data]\r\n    }\r\n\r\n    let notificationsTemp = []\r\n    if (notifications.length > 0) {\r\n      for await (var item of notifications) {\r\n        let user = users.find(user => item._to === user._id)\r\n        item['_to_complete'] = user\r\n        if (item.text != '' && item.link != '') {\r\n          let procedures = await loadProcedureNotarials(user._id)\r\n          const idRegex = /id=([^&]+)/\r\n          const pRegex = /p=([^&]+)/\r\n          const idMatch = item.link.match(idRegex)\r\n          const pMatch = item.link.match(pRegex)\r\n\r\n          let procedurenotarialSearch = procedures.find(item => item._id === pMatch[1])\r\n          if (procedurenotarialSearch) {\r\n            item['procedure_notarial'] = moment(procedurenotarialSearch.date).locale('es').format('LL') + ' - ' + procedurenotarialSearch.notarialAct.name\r\n          }\r\n        }\r\n        notificationsTemp.push(item)\r\n      }\r\n    }\r\n    notifications.sort((a, b) => {\r\n      return a.created_at - b.created_at\r\n    })\r\n    setListDatas(notifications)\r\n  }\r\n\r\n  const loadProcedureNotarials = async (value) => {\r\n    const response = await httpClient.get('/api/procedurenotarial/' + value)\r\n    if (response.status == 200) {\r\n      return response.data\r\n    }\r\n    return []\r\n  }\r\n\r\n  useEffect(() => {\r\n    getDatas()\r\n    setLoader(true)\r\n    setTimeout(() => {\r\n      setLoader(false)\r\n    }, 2000)\r\n  }, [])\r\n  return (\r\n    <>\r\n      <NotificationDialog\r\n        notification={data}\r\n        data={dataDialog}\r\n        setData={setDataDialog}\r\n        callback={callbackData}\r\n      />\r\n      <Layout loader={loader} classNameMain=\"mainTable\">\r\n        <NewProcedure title='Notifcaciones' />\r\n        <div className=\"header-page\">\r\n          <div className=\"title-btn\">\r\n            <h6>A continuación encontrarás todas tus notificaciones</h6>\r\n            <Button \r\n              size=\"large\"\r\n              className=\"btn-create\"\r\n              type=\"primary\"\r\n              onClick={() => handleNewData()}>\r\n              Crear\r\n            </Button>\r\n          </div>\r\n          <div className=\"main-card card\">\r\n            <div className=\"main-card-table\">\r\n              <DataTable\r\n                columns={columns}\r\n                data={listDatas}\r\n                pagination={{ position: ['bottomCenter'] }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n"],"sourceRoot":""}