{"version":3,"sources":["components/layout/components/NewProcedure.jsx","pages/notarialact/components/ModalActor.js","pages/notarialact/components/FormItem.js","pages/notarialact/components/FormIterative.js","pages/notarialact/components/FormSample.js","pages/notarialact/notarialact.page.js"],"names":["NewProcedure","_ref","title","_jsxs","className","children","_jsx","MoreIcon","Notifications","ModalActor","_actor$actor","open","actor","setOpen","data","form","setData","callback","callbackLength","formSelected","setFormSelected","useState","editActor","position","item","_id","deleteActor","dataAux","list","splice","length","useEffect","loadInputs","arrayInput","Object","keys","forEach","input","j","name","checked","push","_Fragment","style","width","maxWidth","margin","Collapse","collapsible","defaultActiveKey","items","key","label","textAlign","React","Fragment","map","Tooltip","overlayClassName","color","EditOutlined","onClick","handleEdit","Alert","show","type","message","btnOk","buttonX","fnOk","fnCancel","handleDelete","DeleteOutlined","FormItem","formInput","iterative","Form","Item","rules","required","min","minCant","max","maxCant","hasFeedback","Input","FormIterative","notarialact","setActorsIterative","actorsIterative","flag","useForm","loader","setLoader","onFinish","values","getFieldsValue","actors","resetFields","loadInitialValues","object","setFieldsValue","Row","Col","span","labelCol","wrapperCol","autoComplete","validation","Flex","gap","align","vertical","Button","icon","PlusOutlined","htmlType","FormSample","NotarialAct","props","setNotarialact","user","useContext","AuthContext","formData","i","array","split","validate","HttpClient","post","notarialAct","state","then","res","history","id","alertShow","result","idsSingle","idsIterative","count_fields_required","console","log","undefined","aux_result","characters_min","characters_max","async","queryString","parse","location","search","response","get","status","loadNotarialAct","setTimeout","Layout","hasHeaderProfile","visible","classNameMain","category","description","note","FormIterarive","SaveOutlined"],"mappings":"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","file":"static/js/28.353e92d9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { MoreIcon } from '../../icons/Icons'\r\nimport Notifications from './Notifications'\r\n\r\nconst NewProcedure = ({ title = 'Nuevo Trámite' }) => {\r\n  return (\r\n    <div className=\"content-add-tramite\">\r\n      <div className=\"button-nuevo-tramite\">\r\n        <div className=\"centrarVerHor\">\r\n          <MoreIcon />\r\n          <span>{title}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"input-tramite\">\r\n        <div className=\"notificacion-movil\">\r\n          <Notifications />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewProcedure\r\n","import React, { useEffect, useState } from 'react'\r\n// import DataTable from '../../../components/table/DataTable'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { Collapse, Tooltip } from 'antd'\r\nimport Alert from '../../../helpers/alert/Alert'\r\n\r\nconst ModalActor = ({ open, actor, setOpen, data, form, setData, callback, callbackLength }) => {\r\n  const [formSelected, setFormSelected] = useState([])\r\n\r\n  const handleOk = () => {\r\n    callbackLength(data)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleDelete = (position) => {\r\n    Alert.show({\r\n      type: 'warning',\r\n      title: 'Eliminar',\r\n      message: `¿Estás segur@ que deseas eliminarlo?`,\r\n      btnOk: 'Aceptar',\r\n      buttonX: true,\r\n      fnOk: () => {\r\n        deleteActor(position)\r\n      },\r\n      // btnCancel: 'Cancelar',\r\n      fnCancel: () => { }\r\n    })\r\n  }\r\n\r\n  const handleEdit = (position) => {\r\n    Alert.show({\r\n      type: 'warning',\r\n      title: 'Editar',\r\n      message: `¿Estás segur@ que deseas editarlo?`,\r\n      btnOk: 'Aceptar',\r\n      buttonX: true,\r\n      fnOk: () => {\r\n        editActor(position)\r\n      },\r\n      // btnCancel: 'Cancelar',\r\n      fnCancel: () => { }\r\n    })\r\n  }\r\n\r\n  const editActor = (position) => {\r\n    var item = data[actor.actor._id][position]\r\n    deleteActor(position)\r\n    callback(item)\r\n    setOpen(false)\r\n  }\r\n  const deleteActor = (position) => {\r\n    var dataAux = { ...data }\r\n    let list = dataAux[actor.actor._id] || []\r\n    list.splice(position, 1)\r\n    dataAux[actor.actor._id] = list\r\n    setData(dataAux)\r\n    if (dataAux.length === 0) setOpen(false)\r\n  }\r\n\r\n  const loadInputs = () => {\r\n    var arrayInput = []\r\n    Object.keys(form).forEach((input, j) => {\r\n      if (form[input]['actors'][actor.actor.name].checked) {\r\n        arrayInput.push(form[input]['input'])\r\n      }\r\n    })\r\n    setFormSelected(arrayInput)\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadInputs()\r\n  }, [])\r\n\r\n  return (\r\n    /*{ <Modal\r\n      open={open}\r\n      title={actor.actor.name}\r\n      // onOk={handleOk}\r\n      onCancel={handleOk}\r\n      forceRender\r\n      maskClosable={false}\r\n      centered\r\n      className=\"modalActors\"\r\n      footer={[\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          // loading={loading}\r\n          onClick={handleOk}\r\n        >\r\n          Aceptar\r\n        </Button>\r\n      ]}\r\n    >\r\n      <p className=\"description\">\r\n        A continuación encontrarás el listado completo de los que has agregado. Recuerda que en\r\n        acciones, puedes editarlos o eliminarlos.\r\n      </p> }*/\r\n    <>\r\n      {data && data[actor?.actor?._id].length ?\r\n        <>\r\n          {formSelected && formSelected.length > 0 && (\r\n            <div style={{ width: '100%', maxWidth: '800px', margin: '20px' }}>\r\n              <Collapse\r\n                collapsible=\"header\"\r\n                defaultActiveKey={['1']}\r\n                items={[\r\n                  {\r\n                    key: '1',\r\n                    label: 'Personas: ' + data[actor.actor._id].length,\r\n                    children: <table style={{ width: '100%' }}>\r\n                      <thead className=\"ant-table-thead\">\r\n                        <tr>\r\n                          <th className=\"ant-table-cell\" style={{ textAlign: 'left' }}>{formSelected[0].name}</th>\r\n                          {formSelected[1] &&\r\n                            <th className=\"ant-table-cell\" style={{ textAlign: 'left' }}>{formSelected[1].name}</th>}\r\n                          <th width=\"10%\" className=\"ant-table-cell\">\r\n                            Acciones\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className=\"ant-table-tbody\">\r\n                        {data ? (\r\n                          <React.Fragment>\r\n                            {data[actor.actor._id] &&\r\n                              data[actor.actor._id].map((item, j) => (\r\n                                <tr key={j}>\r\n                                  <td className=\"ant-table-cell\">{item[formSelected[0]._id]}</td>\r\n                                  {formSelected[1] && (\r\n                                    <td className=\"ant-table-cell\">{item[formSelected[1]._id]}</td>\r\n                                  )}\r\n\r\n                                  <td className=\"btn-action ant-table-cell\" style={{ textAlign: 'center' }}>\r\n                                    <Tooltip\r\n                                      title=\"Editar\"\r\n                                      overlayClassName=\"tooltipCustomActor\"\r\n\r\n                                      color={'#8556ee'}\r\n                                    >\r\n                                      <a className=\"action-delete\">\r\n                                        <EditOutlined onClick={() => handleEdit(j)} />\r\n                                      </a>\r\n                                    </Tooltip>\r\n\r\n                                    <Tooltip\r\n                                      title=\"Eliminar\"\r\n                                      overlayClassName=\"tooltipCustomActor\"\r\n                                      color={'#8556ee'}\r\n                                    >\r\n                                      <a className=\"action-delete\" onClick={() => handleDelete(j)}>\r\n                                        <DeleteOutlined />\r\n                                      </a>\r\n                                    </Tooltip>\r\n                                  </td>\r\n                                </tr>\r\n                              ))}\r\n                          </React.Fragment>\r\n                        ) : (\r\n                          <tr></tr>\r\n                        )}\r\n                      </tbody>\r\n                    </table>\r\n                  }\r\n                ]}\r\n              />\r\n\r\n            </div>\r\n          )}\r\n        </> : ''\r\n      }\r\n\r\n    </>\r\n    /* </Modal> */\r\n  )\r\n}\r\n\r\nexport default ModalActor\r\n","import React, { useEffect } from 'react'\r\nimport { Input, Form } from 'antd'\r\n\r\nconst FormItem = ({ formInput, actor, iterative }) => {\r\n\r\n    return (\r\n        <>\r\n            {(formInput.type === 'text' || formInput.type === 'string') && (\r\n\r\n                <Form.Item\r\n                    className=\"spaceLabel\"\r\n                    label={formInput.name + ':'}\r\n                    name={!iterative ? formInput._id + '_' + actor.actor._id : formInput._id}\r\n                    rules={[\r\n                        {\r\n                            required: formInput.required, message: 'No olvides ingresar este dato'\r\n                        }, {\r\n                            min: formInput.minCant,\r\n                            message: 'Dato no válido, por favor ingrésalo de nuevo'\r\n\r\n                        }, {\r\n                            max: formInput.maxCant,\r\n                            message: 'Dato no válido, por favor ingrésalo de nuevo'\r\n\r\n                        }\r\n\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <Input className=\"input-dynamic\"\r\n                        type=\"text\"\r\n                    //placeholder={formInput.name} \r\n                    />\r\n                </Form.Item >\r\n\r\n            )\r\n            }\r\n\r\n            {\r\n                formInput.type === 'number' && (\r\n                    <Form.Item\r\n                        className=\"spaceLabel\"\r\n                        label={formInput.name + ':'}\r\n                        name={!iterative ? formInput._id + '_' + actor.actor._id : formInput._id}\r\n                        rules={[\r\n                            formInput.required ? {\r\n                                required: formInput.required, message: 'No olvides ingresar este dato'\r\n                            } : null,\r\n                            {\r\n                                min: formInput.minCant,\r\n                                message: 'Dato no válido, por favor ingrésalo de nuevo'\r\n\r\n                            }, {\r\n                                max: formInput.maxCant,\r\n                                message: 'Dato no válido, por favor ingrésalo de nuevo'\r\n\r\n                            }]}\r\n                        hasFeedback\r\n                    >\r\n                        <Input className=\"input-dynamic\"\r\n                            type=\"number\"\r\n                        //placeholder={formInput.name} \r\n                        />\r\n                    </Form.Item>\r\n                )\r\n            }\r\n\r\n            {\r\n                formInput.type === 'email' && (\r\n\r\n\r\n                    <Form.Item\r\n                        className=\"spaceLabel\"\r\n                        label={formInput.name + ':'}\r\n                        name={!iterative ? formInput._id + '_' + actor.actor._id : formInput._id}\r\n                        hasFeedback\r\n                        rules={[\r\n                            formInput.required ? {\r\n                                required: formInput.required,\r\n                                message: 'No olvides ingresar este dato'\r\n                            } : null, {\r\n                                type: 'email',\r\n                                message: 'Este correo electrónico no es válido'\r\n                            }\r\n                        ]}\r\n\r\n                    >\r\n                        <Input className=\"input-dynamic\"\r\n                            type=\"email\"\r\n                        //placeholder={formInput.name} \r\n                        />\r\n                    </Form.Item>\r\n\r\n                )\r\n            }\r\n\r\n            {\r\n                formInput.type === 'date' && (\r\n\r\n\r\n                    <Form.Item\r\n                        className=\"spaceLabel\"\r\n                        label={formInput.name + ':'}\r\n                        name={!iterative ? formInput._id + '_' + actor.actor._id : formInput._id}\r\n                        hasFeedback\r\n                        rules={\r\n                            [\r\n                                formInput.required ? {\r\n                                    required: formInput.required,\r\n                                    message: 'No olvides ingresar este dato'\r\n                                } : null\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Input className=\"input-dynamic\"\r\n                            type=\"date\"\r\n                        //placeholder={formInput.name} \r\n                        />\r\n                    </Form.Item>\r\n\r\n                )\r\n            }\r\n\r\n            {/*{formInput.type == 'list' && (\r\n\r\n                <Form.Item\r\n                    className=\"selectDynamic\"\r\n                    label={formInput.name}\r\n                    name={formInput._id + \"_\" + actor.actor._id}\r\n                    rules={[{ required: formInput.required, message: 'Este campo es requerido!' }]}\r\n                >\r\n                    <Select className=\"select\">\r\n                        <Select.Option value=\"demo\">Demo</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n            )}*/}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormItem\r\n","import { PlusOutlined } from '@ant-design/icons'\r\nimport { Button, Col, Flex, Form, Row } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport ModalActor from '../components/ModalActor'\r\nimport FormItem from './FormItem'\r\n\r\nconst FormIterative = ({\r\n  actor,\r\n  notarialact,\r\n  setActorsIterative,\r\n  actorsIterative,\r\n  iterative,\r\n  flag\r\n}) => {\r\n  const [form] = Form.useForm()\r\n  const [open, setOpen] = useState(false)\r\n  const [loader, setLoader] = useState(null)\r\n\r\n  const onFinish = () => {\r\n    let values = form.getFieldsValue()\r\n\r\n    let actors = { ...actorsIterative }\r\n    let list = actors[actor.actor._id] || []\r\n    list.push(values)\r\n    actors[actor.actor._id] = list\r\n    setActorsIterative(actors)\r\n    form.resetFields()\r\n  }\r\n\r\n  const onModal = () => {\r\n    setOpen(true)\r\n  }\r\n  const callbackEdit = (item) => {\r\n    loadInitialValues(item)\r\n    setLoader(item)\r\n  }\r\n\r\n  const callbackLength = () => {\r\n    if (actorsIterative.length == 0) {\r\n      setActorsIterative(null)\r\n    }\r\n  }\r\n\r\n  const setValidationData = () => {\r\n    flag = false\r\n    return (\r\n      <p className=\"notaJuridica\">\r\n        Si es una empresa, por favor diligencia los siguientes datos:\r\n      </p>\r\n    )\r\n  }\r\n\r\n  const loadInitialValues = (item) => {\r\n    var object = new Object()\r\n\r\n    Object.keys(notarialact.form).forEach((input, j) => {\r\n      if (notarialact.form[input]['actors'][actor.actor.name].checked) {\r\n        object[notarialact.form[input]['input']._id] = item[notarialact.form[input]['input']._id]\r\n      }\r\n    })\r\n\r\n    form.setFieldsValue(object)\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n      <Row>\r\n        <Col span={24} className=\"centrar margeTituloActor\">\r\n          <h2 className=\"titleIngresarInfo actors\">{actor.actor.name}</h2>\r\n        </Col>\r\n      </Row>\r\n      <Form\r\n        name=\"basic\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 8 }}\r\n        autoComplete=\"off\"\r\n        form={form}\r\n        onFinish={onFinish}\r\n      >\r\n        {Object.keys(notarialact.form).map((input, j) => (\r\n          <Row className=\"\" key={j}>\r\n            {notarialact.form[input]['actors'][actor.actor.name].checked &&\r\n              !notarialact.form[input]['input'].validation ? (\r\n              <>\r\n                <Col span={24} className=\"centrar\">\r\n                  <FormItem\r\n                    formInput={notarialact.form[input]['input']}\r\n                    actor={actor}\r\n                    iterative={iterative}\r\n                  />\r\n                </Col>\r\n              </>\r\n            ) : null}\r\n          </Row>\r\n        ))}\r\n\r\n        {Object.keys(notarialact.form).map((input, j) => (\r\n          <Row className=\"\" key={j}>\r\n            {notarialact.form[input]['actors'][actor.actor.name].checked &&\r\n              notarialact.form[input]['input'].validation ? (\r\n              <>\r\n                {flag && (\r\n                  <Col span={24} className=\"centrar\">\r\n                    {setValidationData()}\r\n                  </Col>\r\n                )}\r\n                <Col span={24} className=\"centrar\">\r\n                  <FormItem\r\n                    formInput={notarialact.form[input]['input']}\r\n                    actor={actor}\r\n                    iterative={iterative}\r\n                  />\r\n                </Col>\r\n              </>\r\n            ) : null}\r\n          </Row>\r\n        ))}\r\n        <Flex gap=\"middle\" align=\"center\" vertical>\r\n\r\n          <ModalActor\r\n            open={open}\r\n            actor={actor}\r\n            setOpen={setOpen}\r\n            data={actorsIterative}\r\n            setData={setActorsIterative}\r\n            form={notarialact.form}\r\n            callback={callbackEdit}\r\n            onFinish={onFinish}\r\n            callbackLength={callbackLength}\r\n          />\r\n\r\n        </Flex>\r\n\r\n\r\n        <Row>\r\n          <Col span={6} className=\"centrar\">\r\n            <div className=\"containerButtons\">\r\n              <Button type=\"primary\" icon={<PlusOutlined />} htmlType=\"submit\">\r\n                {loader ? 'Guardar' + ' ' + actor.actor.name : 'Agregar' + ' ' + actor.actor.name}\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FormIterative\r\n","import React from 'react'\r\nimport { Row, Col, Form } from 'antd'\r\nimport FormItem from './FormItem'\r\n\r\nconst FormSample = ({ notarialact, actor, form, iterative, flag }) => {\r\n  let object = {}\r\n\r\n  object[actor.actor._id] = actor.actor._id\r\n\r\n  const setValidationData = () => {\r\n    flag = false\r\n    return (\r\n      <p className=\"notaJuridica\">\r\n        Si es una empresa, por favor diligencia los siguientes datos:\r\n      </p>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={24} className=\"centrar margeTituloActor\">\r\n          <h2 className=\"titleIngresarInfo actors\">{actor.actor.name}</h2>\r\n        </Col>\r\n      </Row>\r\n      <Form\r\n        name=\"basic\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 8 }}\r\n        autoComplete=\"off\"\r\n        form={form}\r\n      >\r\n        {Object.keys(notarialact.form).map((input, j) => (\r\n          <Row className=\"\" key={j}>\r\n            {notarialact.form[input]['actors'][actor.actor.name].checked &&\r\n            !notarialact.form[input]['input'].validation ? (\r\n              <>\r\n                <Col span={24} className=\"centrar\">\r\n                  <FormItem\r\n                    formInput={notarialact.form[input]['input']}\r\n                    actor={actor}\r\n                    iterative={iterative}\r\n                  />\r\n                </Col>\r\n              </>\r\n            ) : null}\r\n          </Row>\r\n        ))}\r\n\r\n        {Object.keys(notarialact.form).map((input, j) => (\r\n          <Row className=\"\" key={j}>\r\n            {notarialact.form[input]['actors'][actor.actor.name].checked &&\r\n            notarialact.form[input]['input'].validation ? (\r\n              <>\r\n                {flag && (\r\n                  <Col span={24} className=\"centrar\">\r\n                    {setValidationData()}\r\n                  </Col>\r\n                )}\r\n                <Col span={24} className=\"centrar\">\r\n                  <FormItem\r\n                    formInput={notarialact.form[input]['input']}\r\n                    actor={actor}\r\n                    iterative={iterative}\r\n                  />\r\n                </Col>\r\n              </>\r\n            ) : null}\r\n          </Row>\r\n        ))}\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FormSample\r\n","import React, { useContext, useEffect, useState } from 'react'\r\n// CONTEXT\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport { Button, Col, Form, Row } from 'antd'\r\nimport queryString from 'query-string'\r\nimport Alert from '../../helpers/alert/Alert'\r\nimport HttpClient from '../../helpers/network/HttpClient'\r\n\r\n// COMPONENTS\r\nimport { SaveOutlined } from '@ant-design/icons'\r\nimport NewProcedure from '../../components/layout/components/NewProcedure'\r\nimport Layout from '../../components/layout/Layout'\r\nimport FormIterarive from './components/FormIterative'\r\nimport FormSample from './components/FormSample'\r\n\r\nimport './scss/notarialact.page.scss'\r\n\r\nconst NotarialAct = (props) => {\r\n  const [notarialact, setNotarialact] = useState()\r\n  const [loader, setLoader] = useState(false)\r\n  const [actorsIterative, setActorsIterative] = useState()\r\n  const [form] = Form.useForm()\r\n  const { user } = useContext(AuthContext)\r\n\r\n  const loadNotarialAct = async () => {\r\n    let { id } = queryString.parse(props.location.search)\r\n    const response = await HttpClient.get('/api/notarialact/' + id)\r\n\r\n    if (response.status === 200) {\r\n      setNotarialact(response.data)\r\n    }\r\n  }\r\n\r\n  const onFinish = (flag) => {\r\n    const formData = form.getFieldsValue()\r\n    let data = {}\r\n    let actor\r\n    Object.keys(formData).forEach((item, i) => {\r\n      const array = item.split('_')\r\n      if (actor) {\r\n        if (actor !== array[1]) {\r\n          actor = array[1]\r\n          data[actor] = {}\r\n        }\r\n      } else {\r\n        actor = array[1]\r\n        data[actor] = {}\r\n      }\r\n      data[actor][array[0]] = formData[item]\r\n    })\r\n    var actors = { ...data, ...actorsIterative }\r\n    if (validate(actors)) {\r\n      HttpClient.post('/api/procedurenotarial', {\r\n        notarialAct: notarialact._id,\r\n        actors: actors,\r\n        user: user._id,\r\n        state: '2'\r\n      }).then((res) => {\r\n        if (flag) {\r\n          props.history.push('/notarialactsteptwo?id=' + notarialact._id + '&p=' + res.data.id)\r\n          form.resetFields()\r\n          actors = {}\r\n        } else {\r\n          alertShow()\r\n        }\r\n      })\r\n    } else {\r\n      Alert.show({\r\n        type: 'error',\r\n        title: '¡Lo sentimos!',\r\n        message: `No puedes continuar hasta que hayas diligenciado todos los datos que son obligatorios.\\nSi no cuentas con ellos y necesitas tiempo para reunirlos, puedes darle clic al botón Guardar y cuando tengas los datos podrás ir a Mis trámites y continuar en donde lo dejaste.`,\r\n        btnOk: 'Aceptar',\r\n        fnOk: () => { },\r\n        buttonX: true,\r\n        fnCancel: () => { }\r\n      })\r\n    }\r\n  }\r\n\r\n  const validate = (object) => {\r\n    var type = 0\r\n    var idsSingle = []\r\n    var idsIterative = []\r\n    var result = false\r\n    let count_fields_required = 0\r\n\r\n    notarialact.actors.forEach((item, i) => {\r\n      if (!item.iterative) {\r\n        type = 1\r\n        idsSingle.push(item.actor._id)\r\n      }\r\n    })\r\n\r\n    notarialact.actors.forEach((item, i) => {\r\n      /*if (item.iterative && (type == 1 || type == 2)) {\r\n        console.log('entro2')\r\n        type = 3\r\n        idsSingle.push(item.actor._id)\r\n        idsIterative.push(item.actor._id)\r\n      } else if (item.iterative && type == 0) {\r\n        console.log('entro3')\r\n        type = 2\r\n        idsIterative.push(item.actor._id)\r\n      }*/\r\n      if (item.iterative) {\r\n        idsIterative.push(item.actor._id)\r\n      }\r\n    })\r\n\r\n    //SOLO ACTORES SIMPLES\r\n    /*if (type == 1) {\r\n\r\n      idsSingle.forEach((item, i) => {\r\n        if (object[item]) {\r\n          Object.keys(object[item]).forEach((input) => {\r\n            let characters_min = notarialact.form[input].input.minCant || 0\r\n            let characters_max = notarialact.form[input].input.maxCant || 0\r\n            if ((object[item][input] == undefined || object[item][input] == '') &&\r\n              notarialact.form[input].input.required) {\r\n              count_fields_required += 1\r\n            }\r\n\r\n          })\r\n        }\r\n      })\r\n      result = count_fields_required == 0\r\n    } else if (type == 2) {\r\n      //SOLO ACTORES ITERATIVOS\r\n      idsIterative.forEach((item, i) => {\r\n        /*if (object[item]) {\r\n          result = true\r\n        }\r\n        if (object[item]) {\r\n          Object.keys(object[item]).forEach((input) => {\r\n            if ((object[item][input] == undefined || object[item][input] == '') && notarialact.form[input].input.required)\r\n              count_fields_required += 1\r\n          })\r\n        }\r\n      })\r\n      result = count_fields_required == 0\r\n    } else if (type == 3) {*/\r\n    //AMBOS ACTORES\r\n    //let flag = false\r\n    //let flag2 = false\r\n    idsSingle.forEach((item, i) => {\r\n      /*if (object[item]) {\r\n        flag = true\r\n      }*/\r\n      console.log(object)\r\n      if (object[item]) {\r\n\r\n        Object.keys(object[item]).forEach((input) => {\r\n          if ((object[item][input] == undefined || object[item][input] == '') &&\r\n            notarialact.form[input].input.required) {\r\n            count_fields_required += 1\r\n          }\r\n\r\n        })\r\n      }\r\n    })\r\n\r\n    console.log('fiels', count_fields_required)\r\n\r\n    idsIterative.forEach((item, i) => {\r\n      /*if (object[item]) {\r\n        flag2 = true\r\n      }*/\r\n      if (object[item]) {\r\n        object[item].forEach((data) => {\r\n          Object.keys(data).forEach((input) => {\r\n            if ((data[input] == undefined || data[input] == '') &&\r\n              notarialact.form[input].input.required) {\r\n              count_fields_required += 1\r\n            }\r\n          })\r\n        })\r\n      }\r\n    })\r\n\r\n    //if (flag && flag2) result = true\r\n    result = count_fields_required == 0\r\n    //}\r\n\r\n    let aux_result = 0\r\n    idsSingle.forEach((item, i) => {\r\n\r\n      if (object[item]) {\r\n        Object.keys(object[item]).forEach((input) => {\r\n          let characters_min = notarialact.form[input].input.minCant || 0\r\n          let characters_max = notarialact.form[input].input.maxCant || 0\r\n          if ((object[item][input] == undefined || object[item][input] == '') && !notarialact.form[input].input.required) {\r\n            aux_result = aux_result + 0\r\n          } else if ((object[item][input] == undefined || object[item][input] == '') && notarialact.form[input].input.required) {\r\n            if (characters_min > 0) {\r\n              aux_result += 1\r\n            }\r\n          } else if (object[item][input].length >= characters_min && object[item][input].length <= characters_max) {\r\n            aux_result = aux_result + 0\r\n          } else {\r\n            aux_result += 1\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    idsIterative.forEach((item, i) => {\r\n      if (object[item]) {\r\n        object[item].forEach((data) => {\r\n          Object.keys(data).forEach((input) => {\r\n            let characters_min = notarialact.form[input].input.minCant || 0\r\n            let characters_max = notarialact.form[input].input.maxCant || 0\r\n            if ((data[input] == undefined || data[input] == '') && !notarialact.form[input].input.required) {\r\n              aux_result = aux_result + 0\r\n            } else if ((data[input] == undefined || data[input] == '') && notarialact.form[input].input.required) {\r\n              if (characters_min > 0)\r\n                aux_result += 1\r\n            } else if (data[input].length >= characters_min && data[input].length <= characters_max) {\r\n              aux_result = aux_result + 0\r\n            } else {\r\n              aux_result += 1\r\n            }\r\n          })\r\n\r\n        })\r\n      }\r\n    })\r\n\r\n    console.log(aux_result)\r\n    return result && (aux_result == 0)\r\n  }\r\n\r\n  const alertShow2 = () => {\r\n    Alert.show({\r\n      type: 'success',\r\n      title: '¡Tú trámite ha sido guardado!',\r\n      message: `Para completar tu solicitud, podrás ir a la opción del menú Mis trámites, seleccionar el botón Ver de este trámite y así podrás continuar justo en donde lo dejaste.\\nRecuerda que tienes 10 días para completarlo. Después de este tiempo, tu trámite será eliminado.\\n\\nSi tienes alguna duda, activa la ayuda y podrás chatear con nosotros o si deseas podemos llamarte.`,\r\n      btnOk: 'Aceptar',\r\n      fnOk: () => {\r\n        props.history.push('/procedurenotarial')\r\n      },\r\n      buttonX: true,\r\n      fnCancel: () => { }\r\n    })\r\n  }\r\n\r\n  const alertShow = () => {\r\n    Alert.show({\r\n      type: 'warning',\r\n      title: '',\r\n      message: `Toda la información que has ingresado quedará guardada para que puedas continuar después. Si necesitas ayuda no dudes en contactarnos.\\n\\n¿Segur@ que deseas guardar y salir?`,\r\n      btnOk: 'Confirmar',\r\n      fnOk: () => {\r\n        alertShow2()\r\n      },\r\n      buttonX: true,\r\n      fnCancel: () => { }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadNotarialAct()\r\n    setLoader(true)\r\n    setTimeout(() => {\r\n      setLoader(false)\r\n    }, 3000)\r\n  }, [])\r\n\r\n  return (\r\n    <Layout loader={loader} hasHeaderProfile={true} visible={true} classNameMain=\"notarialAct\">\r\n      <NewProcedure />\r\n      {notarialact ? (\r\n        <>\r\n          <Row className=\"containerProcedure-info\">\r\n            {/* <Col span={1}></Col> */}\r\n            <Col span={23} className=\"categories\">\r\n              <h3 className=\"title-indicaciones\">{notarialact.category.name} /</h3>\r\n              <div className=\"line-morado\" />\r\n              <h2 className=\"title-indicaciones\">{notarialact.name}</h2>\r\n              <div className=\"diplayflex\">\r\n                <div className=\"content-circule\">\r\n                  <span className=\"circule-number\">1</span>\r\n                </div>\r\n                <h2 className=\"titleIngresarInfo\">Ingresa la información</h2>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row className=\"containerDescription\">\r\n            <Col span={1}></Col>\r\n            <Col span={22}>\r\n              <p className=\"containerDescription-description\">{notarialact.description}</p>\r\n              {notarialact.note && (\r\n                <p className=\"containerDescription-description\">{notarialact.note}</p>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"containerForm\">\r\n            <Col span={24}>\r\n              {notarialact.actors.map((actor, i) => (\r\n                <>\r\n                  {!actor.iterative ? (\r\n                    <FormSample\r\n                      key={i}\r\n                      notarialact={notarialact}\r\n                      actor={actor}\r\n                      form={form}\r\n                      iterative={false}\r\n                      flag={true}\r\n                    />\r\n                  ) : (\r\n                    <FormIterarive\r\n                      key={i}\r\n                      notarialact={notarialact}\r\n                      actor={actor}\r\n                      setActorsIterative={setActorsIterative}\r\n                      actorsIterative={actorsIterative}\r\n                      iterative={true}\r\n                      flag={true}\r\n                    />\r\n                  )}\r\n                </>\r\n              ))}\r\n              <Row className=\"containerButtonFinished\">\r\n                {/* <Col sm={0} md={8}></Col> */}\r\n\r\n                {/* <Col sm={0} md={8}></Col> */}\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"btnSave\"\r\n                  icon={<SaveOutlined />}\r\n                  onClick={() => onFinish(false)}\r\n                >\r\n                  Guardar y salir\r\n                </Button>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"btnContinuar\"\r\n                  onClick={() => onFinish(true)}\r\n                >\r\n                  Continuar\r\n                </Button>\r\n              </Row>\r\n              {/* <Col span={10}></Col> */}\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ) : null}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default NotarialAct\r\n"],"sourceRoot":""}